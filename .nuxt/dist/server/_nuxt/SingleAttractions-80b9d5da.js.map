{"version":3,"file":"SingleAttractions-80b9d5da.js","sources":["../../../../components/Common/AttractionTab.vue"],"sourcesContent":["<template>\n  <div\n    class=\"w-full max-w-full md:max-w-fit relative gap-[6px] p-0.5 bg-white/10 border border-solid border-white/10 rounded-xl flex overflow-hidden p-[6px]\"\n  >\n    <div\n      :class=\"activeClass\"\n      class=\"absolute h-[calc(100%-12px)] rounded-md bg-red w-full -translate-y-1/2 top-1/2 transition-all duration-300 border border-white/25\"\n      :style=\"{\n        width: `${active.width}px`,\n        left: `${active.left}px`,\n      }\"\n    ></div>\n    <button\n      v-for=\"(tab, idx) in list\"\n      :id=\"'item_' + tab?.id\"\n      :key=\"idx\"\n      :class=\"[\n        itemClass,\n        modelValue === tab?.id\n          ? 'text-white font-medium'\n          : 'text-white/60 font-medium',\n      ]\"\n      class=\"min-w-[32%] sm:min-w-[32.5%] md:min-w-[160px] bg-white/10 py-2 px-3 md:px-7 text-sm sm:text-base md:text-xl leading-130 rounded-md z-10 m-0 transition-all duration-300 hover:text-white/100 border border-transparent hover:border-white/25\"\n      @click=\"pick(tab?.id, $event)\"\n    >\n      <slot name=\"item\" v-bind=\"tab\"> {{ tab?.title }} </slot>\n    </button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ITabItem } from '~/types/components'\n\nimport { watch, onMounted } from 'vue'\n\ninterface Props {\n  modelValue: number | string\n  list: ITabItem[]\n  itemClass?: string\n  activeClass?: string\n}\nconst props = defineProps<Props>()\n\ninterface Emits {\n  (e: 'update:modelValue', value: string | number): void\n}\nconst $emit = defineEmits<Emits>()\n\nconst active = ref({ left: 0, width: 0 })\nconst pick = (tab: string | number, e?: { target: HTMLButtonElement }) => {\n  const target = e?.target as HTMLButtonElement\n  if (target) {\n    active.value = {\n      left: target?.offsetLeft,\n      width: target?.offsetWidth,\n    }\n\n    $emit('update:modelValue', tab)\n  }\n}\n\nwatch(\n  () => props.modelValue,\n  () => {\n    const item = document.getElementById(\n      `item_${props.modelValue}`\n    ) as HTMLButtonElement\n    pick(props.modelValue, { target: item })\n  },\n  { immediate: true, deep: true }\n)\n\nonMounted(() => {\n  const item = document.getElementById(\n    `item_${props.modelValue}`\n  ) as HTMLButtonElement\n  setTimeout(() => {\n    pick(props.modelValue, { target: item })\n  }, 0)\n})\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAyCA,UAAA,QAAA;AAKA,UAAA,QAAA;AAEA,UAAA,SAAA,IAAA,EAAA,MAAA,GAAA,OAAA,EAAA,CAAA;AACA,UAAA,OAAA,CAAA,KAAA,MAAA;AACE,YAAA,SAAA,uBAAA;AACA,UAAA,QAAA;AACE,eAAA,QAAA;AAAA,UAAe,MAAA,iCAAA;AAAA,UACC,OAAA,iCAAA;AAAA,QACC;AAGjB,cAAA,qBAAA,GAAA;AAAA,MAA8B;AAAA,IAChC;AAGF;AAAA,MAAA,MAAA,MAAA;AAAA,MACc,MAAA;AAEV,cAAA,OAAA,SAAA;AAAA,UAAsB,QAAA,MAAA;AAAA,QACN;AAEhB,aAAA,MAAA,YAAA,EAAA,QAAA,KAAA,CAAA;AAAA,MAAuC;AAAA,MACzC,EAAA,WAAA,MAAA,MAAA,KAAA;AAAA,IAC8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}