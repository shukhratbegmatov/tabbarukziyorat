{"version":3,"file":"Input-5e85d57a.js","sources":["../../../../components/Form/Input.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      'relative inline-flex items-center transition-300 relative rounded-lg border overflow-hidden w-full px-4 py-3 group focus-within:border-white/70 bg-white/10 border-white/20 input-backdrop',\n      { '!border-red': error },\n    ]\"\n  >\n    <span :class=\"[prefixClass]\" class=\"flex-center\">\n      <slot name=\"prefix\" />\n    </span>\n    <input\n      :value=\"modelValue\"\n      v-bind=\"{\n        type,\n        minlength,\n        maxlength,\n        max,\n        min,\n        disabled,\n        placeholder,\n        readonly,\n        autocomplete,\n        id,\n      }\"\n      :class=\"[\n        inputClass,\n        'font-medium leading-130 text-base placeholder:text-base placeholder:font-normal bg-transparent flex-grow outline-none text-white placeholder:text-white/20',\n      ]\"\n      class=\"w-full\"\n      ref=\"Input\"\n      @keyup.enter=\"handleEnter\"\n      @input=\"handleInput\"\n      @blur=\"$emit('blur')\"\n      @focusout=\"$emit('focusout')\"\n      @focus=\"handleFocus\"\n    />\n\n    <span :class=\"[suffixClass]\" class=\"flex-center\">\n      <slot name=\"suffix\" />\n    </span>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\n\nexport interface Props {\n  type?: string\n  placeholder?: string\n  modelValue: number | string\n  disabled?: boolean\n  error?: boolean\n  focus?: boolean\n  maxlength?: number\n  minlength?: number\n  max?: number\n  min?: number\n  inputClass?: string | string[]\n  prefixClass?: string\n  suffixClass?: string\n  autocomplete?: string\n  id?: string\n  readonly?: boolean\n}\n\nconst emit = defineEmits<{\n  (e: 'update:modelValue', value: any): void\n  (e: 'blur'): void\n  (e: 'focusout'): void\n  (e: 'focus'): void\n  (e: 'enter'): void\n}>()\n\nconst handleInput = (e: { target: HTMLInputElement }) => {\n  emit('update:modelValue', e.target.value)\n}\nconst handleEnter = () => {\n  emit('enter')\n}\nconst Input = ref()\ndefineExpose({ Input })\n\nconst props = withDefaults(defineProps<Props>(), {\n  type: 'text',\n  maxlength: 99,\n  minlength: undefined,\n  max: undefined,\n  min: undefined,\n  inputClass: undefined,\n  autocomplete: 'new-password',\n})\n\nconst handleFocus = (e: Event) => {\n  emit('focus')\n}\nwatch(\n  () => props?.focus,\n  (value) => {\n    if (value) {\n      Input?.value?.focus()\n    }\n  },\n  { deep: true, immediate: true }\n)\n</script>\n\n<style>\n/* Chrome, Safari, Edge, Opera */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Firefox */\ninput[type='number'] {\n  -moz-appearance: textfield;\n}\n</style>\n<style scoped>\n/* slightly transparent fallback */\n.input-backdrop {\n  background-color: rgba(7, 9, 28, 0.12);\n}\n\n/* if backdrop support: very transparent and blurred */\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  .input-backdrop {\n    background-color: rgba(7, 9, 28, 0.12);\n    -webkit-backdrop-filter: blur(20px);\n    backdrop-filter: blur(20px);\n  }\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA,UAAA,QAAA;AACA,aAAA,EAAA,MAAA,CAAA;AAEA,UAAA,QAAA;AAaA;AAAA,MAAA,MAAA,+BAAA;AAAA,MACe,CAAA,UAAA;;AAEX,YAAA,OAAA;AACE,+CAAA,UAAA,mBAAA;AAAA,QAAoB;AAAA,MACtB;AAAA,MACF,EAAA,MAAA,MAAA,WAAA,KAAA;AAAA,IAC8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}