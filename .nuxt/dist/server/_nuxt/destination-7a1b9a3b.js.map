{"version":3,"file":"destination-7a1b9a3b.js","sources":["../../../../store/destination.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { mix } from 'polished'\n\nimport { $api } from '~/composables/useFetcher'\nimport { TCommonFetcher } from '~/types/common'\n\nexport const useDestinationStore = defineStore('destinationStore', {\n  state: () => ({\n    popularDestination: [],\n    destinations: [],\n    destinationsSearch: [],\n    religionList: [],\n    religionListWithDestination: [],\n    countryList: [],\n    attractionList: [],\n    mediaList: [],\n    destinationSingle: {},\n    countryMediaList: [],\n    next: null,\n  }),\n  actions: {\n    fetchDestinations(search, limit, religion, country) {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>('/destination/DestinationList', {\n            params: {\n              search,\n              limit,\n              destination_country__in: country,\n              religion__in: religion,\n            },\n          })\n          .then((response) => {\n            if (search) {\n              this.destinationsSearch = response.results\n            } else {\n              this.destinations = response.results\n            }\n            this.next = response.next\n            resolve(response.results)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchPopularDestination() {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>('/destination/DestinationListPopular')\n          .then((response) => {\n            this.popularDestination = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchSingleDestinations(id) {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>(`/destination/DestinationDetail/${id}`)\n          .then((response) => {\n            this.destinationSingle = response\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchAttractions(id, route) {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>(\n            `/destination/AttractionListRecommended/${id}/${route}`\n          )\n          .then((response) => {\n            this.attractionList = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchDestinationMediaList(id, limit) {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>(`/destination/DestinationMediaList/${id}`, {\n            params: {\n              limit,\n            },\n          })\n          .then((response) => {\n            this.mediaList = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchCountryMediaList(id, limit) {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>(`/destination/CountryMediaList/${id}`, {\n            params: {\n              limit,\n            },\n          })\n          .then((response) => {\n            this.countryMediaList = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchReligionList(destination_country: number) {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>(`/destination/ReligionList`, {\n            params: {\n              destination_country,\n            },\n          })\n          .then((response) => {\n            this.religionList = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchReligionListWithDestination() {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>('/destination/ReligionListWithDestinationCount')\n          .then((response) => {\n            this.religionListWithDestination = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n    fetchCountryList() {\n      return new Promise((resolve, reject) => {\n        $api\n          .$get<TCommonFetcher>('/destination/CountryListWithDestinationCount')\n          .then((response) => {\n            this.countryList = response.results\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    },\n  },\n  getters: {},\n})\n"],"names":[],"mappings":"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"}