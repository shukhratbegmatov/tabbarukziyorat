import {
  computed,
  createBlock,
  defineComponent,
  inject,
  onMounted,
  onUnmounted,
  openBlock
} from "./chunk-KYH3IPM3.js";
import {
  ref,
  toRefs
} from "./chunk-D5UAGTNL.js";
import "./chunk-O6G56OPT.js";

// node_modules/vue3-recaptcha-v2/dist/vue3-recaptcha-v2.js
var d = Symbol("recaptchaSiteKey");
function l(e, t) {
  if (!t.siteKey)
    throw new Error("options must be included siteKey");
  e.provide(d, t.siteKey), function(e2) {
    const t2 = e2.alterDomain ? "www.recaptcha.net" : "www.google.com";
    if (document.getElementById("vue3-recaptcha-v2"))
      return;
    const r = document.createElement("script");
    r.setAttribute("id", "vue3-recaptcha-v2"), r.setAttribute("src", `https://${t2}/recaptcha/api.js?render=explicit`), r.setAttribute("async", ""), r.setAttribute("defer", ""), r.onerror = () => {
    }, document.head.appendChild(r);
  }(t);
}
var p = defineComponent({ name: "VueRecaptcha", emits: ["verify", "expired", "fail", "widgetId"], props: { theme: { type: String, default: "light" }, size: { type: String, default: "normal" }, tabindex: { type: Number, default: 0 } }, setup: (e, { emit: u }) => {
  const { theme: o, size: l2, tabindex: p2 } = toRefs(e), s2 = ref(null), h2 = ref(""), v = inject(d), m = computed(() => o.value), w = computed(() => l2.value), f = computed(() => p2.value), y = () => {
    window.grecaptcha.ready(() => {
      s2.value = window.grecaptcha.render(h2.value, { sitekey: v, theme: m.value, size: w.value, tabindex: f.value, callback: (e2) => u("verify", e2), "expired-callback": () => u("expired"), "error-callback": () => u("fail") }), u("widgetId", s2.value);
    });
  };
  return onMounted(() => {
    window.grecaptcha ? y() : document.getElementById("vue3-recaptcha-v2").onload = () => {
      y();
    };
  }), onUnmounted(() => h2.value = ""), { reCAPTCHA: h2 };
} });
var s = { ref: "reCAPTCHA" };
function h() {
  return { resetRecaptcha: (e) => {
    if ("number" != typeof e)
      throw new Error("resetRecaptcha must have 'widgetId'");
    window.grecaptcha.reset(e);
  } };
}
p.render = function(e, t, r, a, c, i) {
  return openBlock(), createBlock("div", s, null, 512);
}, p.__file = "src/components/vueRecaptcha.vue";
export {
  p as VueRecaptcha,
  l as default,
  h as useRecaptcha
};
//# sourceMappingURL=vue3-recaptcha-v2.js.map
