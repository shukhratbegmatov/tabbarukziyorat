/*! qrcanvas-vue v3.0.0 | ISC License */
import { defineComponent, ref, watchEffect, watch, h } from 'vue';
import { qrcanvas } from 'qrcanvas';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _excluded = ["options"];
var QRCanvas = defineComponent({
  props: {
    options: {
      type: Object,
      required: true
    },
    width: {
      type: Number
    },
    height: {
      type: Number
    }
  },
  setup: function setup(props, context) {
    var canvas = ref(null);

    var update = function update() {
      var options = _extends({}, props.options, {
        canvas: canvas.value
      });

      if (!canvas.value) return;
      context.emit('beforeUpdate', canvas.value);
      qrcanvas(options);
      context.emit('updated', canvas.value);
    };

    watchEffect(update);
    watch(function () {
      return [props.width, props.height];
    }, update);
    return function () {
      props.options;
          var rest = _objectWithoutPropertiesLoose(props, _excluded);

      return h('canvas', _extends({}, rest, {
        ref: canvas
      }));
    };
  }
});

export { QRCanvas };
