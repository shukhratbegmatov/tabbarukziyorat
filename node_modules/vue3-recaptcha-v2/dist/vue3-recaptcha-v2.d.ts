import { AllowedComponentProps } from 'vue';
import { App } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { PropType } from 'vue';
import { Ref } from 'vue';
import { VNodeProps } from 'vue';

declare function install(app: App<Element>, options: options): void;
export default install;

/**
 * config
 */
declare interface options {
    siteKey: string;
    alterDomain?: boolean;
}

declare interface Recaptcha {
    resetRecaptcha(widgetId: number): void;
}

declare type recaptchaSize = "normal" | "compact" | "invisible";

/**
 * components
 */
declare type recaptchaTheme = "light" | "dark";

export declare function useRecaptcha(): Recaptcha;

export declare const VueRecaptcha: DefineComponent<    {
theme: {
type: PropType<recaptchaTheme>;
default: string;
};
size: {
type: PropType<recaptchaSize>;
default: string;
};
tabindex: {
type: NumberConstructor;
default: number;
};
}, {
reCAPTCHA: Ref<string | HTMLElement>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("verify" | "expired" | "fail" | "widgetId")[], "verify" | "expired" | "fail" | "widgetId", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<{
theme: recaptchaTheme;
size: recaptchaSize;
tabindex: number;
} & {}>, {
theme: recaptchaTheme;
size: recaptchaSize;
tabindex: number;
}>;

export { }
