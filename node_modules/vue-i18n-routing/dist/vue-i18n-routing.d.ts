import type { Composer } from '@intlify/vue-i18n-bridge';
import { EffectScope } from 'vue-demi';
import type { ExportedGlobalComposer } from '@intlify/vue-i18n-bridge';
import type { I18n } from '@intlify/vue-i18n-bridge';
import type { Locale } from '@intlify/vue-i18n-bridge';
import type { RawLocation } from '@intlify/vue-router-bridge';
import type { Ref } from 'vue-demi';
import { Route } from '@intlify/vue-router-bridge';
import type { RouteConfig } from '@intlify/vue-router-bridge';
import type { RouteLocation } from '@intlify/vue-router-bridge';
import { RouteLocationNormalized } from '@intlify/vue-router-bridge';
import { RouteLocationNormalizedLoaded } from '@intlify/vue-router-bridge';
import type { RouteLocationRaw } from '@intlify/vue-router-bridge';
import type { Router } from '@intlify/vue-router-bridge';
import type { RouterOptions } from '@intlify/vue-router-bridge';
import type { useRoute } from '@intlify/vue-router-bridge';
import type { useRouter } from '@intlify/vue-router-bridge';
import type { VueI18n } from '@intlify/vue-i18n-bridge';
import type { VueRouter } from '@intlify/vue-router-bridge';

export declare type BaseUrlResolveHandler<Context = unknown> = (context: Context) => string;

/**
 * The browser locale info
 *
 * @remarks
 * This type is used by {@link FindBrowserLocaleOptions#sorter | sorter} in {@link findBrowserLocale} function
 */
export declare interface BrowserLocale {
    /**
     * The locale code, such as BCP 47 (e.g `en-US`), or `ja`
     */
    code: string;
    /**
     * The score number
     *
     * @remarks
     * The score number that is used by `sorter` of {@link FindBrowserLocaleOptions}
     */
    score: number;
}

/**
 * The browser locale matcher
 *
 * @remarks
 * This matcher is used by {@link findBrowserLocale} function
 *
 * @param locales - The target {@link LocaleObject | locale} list
 * @param browserLocales - The locale code list that is used in browser
 *
 * @returns The matched {@link BrowserLocale | locale info}
 */
export declare type BrowserLocaleMatcher = (locales: TargetLocale[], browserLocales: string[]) => BrowserLocale[];

export declare interface ComposableOptions {
    route?: ReturnType<typeof useRoute>;
    router?: ReturnType<typeof useRouter>;
    i18n?: Composer;
}

/**
 * Options to compute route localizing
 *
 * @remarks
 * The route options that is compute the route to be localized on {@link localizeRoutes}
 */
export declare interface ComputedRouteOptions {
    locales: readonly string[];
    paths: Record<string, string>;
}

export declare function createLocaleFromRouteGetter(localeCodes: string[], routesNameSeparator: string, defaultLocaleRouteNameSuffix: string): (route: Route | RouteLocationNormalizedLoaded | RouteLocationNormalized | string) => string;

/**
 * Create a Vue Router instance
 *
 * @param i18n - A Vue I18n instance, see [Vue I18n API docs](https://vue-i18n.intlify.dev/api/general.html#i18n)
 * @param options - An options, see {@link I18nRoutingOptions}
 *
 * @returns A Vue Router instance
 *
 * @remakrs
 * You can create a vue router instance to be used by the Vue app.
 *
 * The routes of the created router instance are handled with i18n routing.
 *
 * At the Vue 2 will return a [Vue Router v3 instance](https://router.vuejs.org/api/#router-construction-options), and at the Vue 3 will return a [Vue Router v4 instance](https://next.router.vuejs.org/api/#createrouter).
 *
 * @public
 */
export declare function createRouter<Options extends I18nRoutingOptions = I18nRoutingOptions>(i18n: I18n, options?: Options): Options['version'] extends 4 ? Router : VueRouter;

export declare const DEFAULT_BASE_URL = "";

export declare const DEFAULT_DETECTION_DIRECTION = "ltr";

export declare const DEFAULT_DYNAMIC_PARAMS_KEY = "";

export declare const DEFAULT_LOCALE = "";

export declare const DEFAULT_LOCALE_ROUTE_NAME_SUFFIX = "default";

export declare const DEFAULT_ROUTES_NAME_SEPARATOR = "___";

export declare const DEFAULT_STRATEGY: "prefix_except_default";

export declare const DEFAULT_TRAILING_SLASH = false;

export declare const DefaultLocalizeRoutesPrefixable: typeof prefixable_2;

export declare const DefaultPrefixable: typeof prefixable;

export declare const DefaultSwitchLocalePathIntercepter: SwitchLocalePathIntercepter;

/**
 * Direction
 */
export declare type Directions = 'ltr' | 'rtl' | 'auto';

export declare type ExtendComposerHook = (compser: Composer) => void;

export declare type ExtendExportedGlobalHook = (global: Composer) => ExtendProperyDescripters;

export declare interface ExtendHooks {
    onExtendComposer?: ExtendComposerHook;
    onExtendExportedGlobal?: ExtendExportedGlobalHook;
    onExtendVueI18n?: ExtendVueI18nHook;
}

export declare function extendI18n<Context = unknown, TI18n extends I18n = I18n>(i18n: TI18n, { locales, localeCodes, baseUrl, hooks, context }?: VueI18nExtendOptions<Context>): EffectScope;

export declare interface ExtendProperyDescripters {
    [key: string]: Pick<PropertyDescriptor, 'get'>;
}

export declare type ExtendVueI18nHook = (composer: Composer) => ExtendProperyDescripters;

/**
 * Find the browser locale
 *
 * @param locales - The target {@link LocaleObject | locale} list
 * @param browserLocales - The locale code list that is used in browser
 * @param options - The options for {@link findBrowserLocale} function
 *
 * @returns The matched the locale code
 */
export declare function findBrowserLocale(locales: LocaleObject[], browserLocales: string[], { matcher, comparer }?: FindBrowserLocaleOptions): string | '';

/**
 * The options for {@link findBrowserLocale} function
 */
export declare interface FindBrowserLocaleOptions {
    matcher?: BrowserLocaleMatcher;
    comparer?: (a: BrowserLocale, b: BrowserLocale) => number;
}

export declare function getComposer(i18n: I18n | VueI18n | Composer): Composer;

/**
 * Get global i18n routing options
 *
 * @param router - A router instance, about router type
 *
 * @returns - {@link I18nRoutingGlobalOptions | global options} from i18n routing options registory, if registered, return it, else empty object
 */
export declare function getGlobalOptions(router: Router | VueRouter): I18nRoutingGlobalOptions;

/**
 * Get a locale
 *
 * @param i18n - An [I18n](https://vue-i18n.intlify.dev/api/general.html#i18n) instance or a [Composer](https://vue-i18n.intlify.dev/api/composition.html#composer) instance
 *
 * @returns A locale
 */
export declare function getLocale(i18n: I18n | Composer | VueI18n): Locale;

export declare function getLocaleCodes(i18n: I18n | VueI18n | Composer): string[];

export declare function getLocales(i18n: I18n | VueI18n | Composer): string[] | LocaleObject[];

export declare function getLocalesRegex(localeCodes: string[]): RegExp;

export declare function getRouteBaseName(this: RoutingProxy, givenRoute?: Route | RouteLocationNormalizedLoaded): string | undefined;

export declare type I18nCommonRoutingOptions = Pick<I18nRoutingOptions, 'defaultLocale' | 'strategy' | 'defaultLocaleRouteNameSuffix' | 'trailingSlash' | 'locales' | 'routesNameSeparator'>;

export declare type I18nCommonRoutingOptionsWithComposable = I18nCommonRoutingOptions & ComposableOptions;

/**
 * I18n header meta info
 */
export declare interface I18nHeadMetaInfo {
    htmlAttrs?: MetaAttrs;
    meta?: MetaAttrs[];
    link?: MetaAttrs[];
}

/**
 * Options for {@link localeHead} function
 */
export declare interface I18nHeadOptions {
    /**
     * Adds a `dir` attribute to the HTML element.
     *
     * @defaultValue false
     */
    addDirAttribute?: boolean;
    /**
     * Adds various SEO attributes.
     *
     * @defaultValue false
     */
    addSeoAttributes?: boolean | SeoAttributesOptions;
    /**
     * Identifier attribute of `<meta>` tag
     *
     * @defaultValue 'hid'
     */
    identifierAttribute?: string;
}

/**
 * Route config for vue-i18n-routing
 */
export declare type I18nRoute = Route_2 & RouteLegacy & {
    redirect?: string;
};

/**
 * Global options for i18n routing
 */
export declare type I18nRoutingGlobalOptions<Context = unknown> = Pick<I18nRoutingOptions<Context>, 'defaultLocale' | 'defaultDirection' | 'defaultLocaleRouteNameSuffix' | 'trailingSlash' | 'routesNameSeparator' | 'strategy' | 'prefixable' | 'switchLocalePathIntercepter' | 'dynamicRouteParamsKey'> & {
    localeCodes?: string[];
};

/**
 * Options to initialize a VueRouter instance
 *
 * @remarks
 * This options is extended from Vue Router `RouterOptioins`, so you can specify those options.
 */
export declare type I18nRoutingOptions<Context = unknown> = {
    /**
     * Vue Router version
     *
     * @remarks
     * You can choice between vue-router v3 and v4.
     *
     * If you specify `3`, this function return Vue Router v3 instance, else specify `4`, this function return Vue Router v4 instance.
     *
     * @defaultValue 4
     */
    version?: 3 | 4;
    /**
     * The app's default locale
     *
     * @remarks
     * When using `prefix_except_default` strategy, URLs for locale specified here won't have a prefix.
     *
     * It's recommended to set this to some locale regardless of chosen strategy, as it will be used as a fallback locale when navigating to a non-existent route
     *
     * @defaultValue '' (emputy string)
     */
    defaultLocale?: string;
    /**
     * List of locales supported by your app
     *
     * @remarks
     * Can either be an array of string codes (e.g. `['en', 'fr']`) or an array of {@link LocaleObject} for more complex configurations
     *
     * @defaultValue []
     */
    locales?: string[] | LocaleObject[];
    /**
     * Routes strategy
     *
     * @remarks
     * Can be set to one of the following:
     *
     * - `no_prefix`: routes won't have a locale prefix
     * - `prefix_except_default`: locale prefix added for every locale except default
     * - `prefix`: locale prefix added for every locale
     * - `prefix_and_default`: locale prefix added for every locale and default
     *
     * @defaultValue 'prefix_except_default'
     */
    strategy?: Strategies;
    /**
     * Whether to use trailing slash
     *
     * @defaultValue false
     */
    trailingSlash?: boolean;
    /**
     * Internal separator used for generated route names for each locale. You shouldn't need to change this
     *
     * @defaultValue '___'
     */
    routesNameSeparator?: string;
    /**
     * Internal suffix added to generated route names for default locale
     *
     * @remarks
     * if strategy is prefix_and_default. You shouldn't need to change this.
     *
     * @defaultValue 'default'
     */
    defaultLocaleRouteNameSuffix?: string;
    /**
     * Default direction direction
     *
     * @defaultValue 'ltr'
     */
    defaultDirection?: Directions;
    /**
     * The fallback base URL to use as a prefix for alternate URLs in hreflang tags.
     *
     * @remarks
     * By default VueRouter's base URL will be used and only if that is not available, fallback URL will be used.
     *
     * Can also be a function (will be passed a Nuxt Context as a parameter) that returns a string.
     *
     * Useful to make base URL dynamic based on request headers.
     *
     * @defaultValue ''
     */
    baseUrl?: string | BaseUrlResolveHandler<Context>;
    /**
     * Route options resolver
     *
     * @defaultValue undefined
     */
    routeOptionsResolver?: RouteOptionsResolver;
    /**
     * Whether to prefix the route path with the locale or not
     *
     * @defaultValue {@link DefaultPrefixable}
     */
    prefixable?: Prefixable;
    /**
     * An option that Intercepter for custom processing for paths resolved with {@link switchLocalePath}
     *
     * @defaultValue {@link DefaultSwitchLocalePathIntercepter}
     */
    switchLocalePathIntercepter?: SwitchLocalePathIntercepter;
    /**
     * Whether to prefix the localize route path with the locale or not
     *
     * @defaultValue {@link DefaultLocalizeRoutesPrefixable}
     */
    localizeRoutesPrefixable?: LocalizeRoutesPrefixable;
    /**
     * The key which to access vue router meta object, when dynamic route params need localize.
     *
     * @defaultValue ''
     */
    dynamicRouteParamsKey?: string | symbol;
} & RouterOptions;

export declare function isComposer(target: any): target is Composer;

export declare function isExportedGlobalComposer(target: any): target is ExportedGlobalComposer;

export declare function isI18nInstance(i18n: any): i18n is I18n;

export declare function isLegacyVueI18n(target: any): target is Pick<VueI18n, 'locale'>;

export declare function isVueI18n(target: any): target is VueI18n;

export declare function localeHead(this: RoutingProxy, { addDirAttribute, addSeoAttributes, identifierAttribute }?: I18nHeadOptions): I18nHeadMetaInfo;

export declare function localeLocation(this: RoutingProxy, route: RawLocation | RouteLocationRaw, locale?: Locale): Location | RouteLocation | undefined;

/**
 * Resolve locale location function
 *
 * @param route - A route location. The path or name of the route or an object for more complex routes
 * @param locale - A locale code, if not specified, uses the current locale
 *
 * @returns Returns the location object for a given route, the location object is resolved by vue-router rather than just a full route path.
 *
 * @see {@link useLocaleLocation}
 */
export declare type LocaleLocationFunction = (route: RawLocation | RouteLocationRaw, locale?: Locale) => Location | RouteLocation | undefined;

/**
 * Locale object
 */
export declare interface LocaleObject extends Record<string, any> {
    code: Locale;
    name?: string;
    dir?: Directions;
    domain?: string;
    file?: string;
    isCatchallLocale?: boolean;
    iso?: string;
}

export declare function localePath(this: RoutingProxy, route: RawLocation | RouteLocationRaw, locale?: Locale): string;

/**
 * Resolve locale path function
 *
 * @param route - A route location. The path or name of the route or an object for more complex routes
 * @param locale - A locale code, if not specified, uses the current locale
 *
 * @returns Returns the localized URL for a given route
 *
 * @see {@link useLocalePath}
 */
export declare type LocalePathFunction = (route: RawLocation | RouteLocation, locale?: Locale) => string;

export declare function localeRoute(this: RoutingProxy, route: RawLocation | RouteLocationRaw, locale?: Locale): Route | ReturnType<Router['resolve']> | undefined;

/**
 * Resolve route fucntion
 *
 * @param route - A route location. The path or name of the route or an object for more complex routes
 * @param locale - A locale code, if not specified, uses the current locale
 *
 * @returns Returns the route object for a given route, the route object is resolved by vue-router rather than just a full route path.
 *
 * @see {@link useLocaleRoute}
 */
export declare type LocaleRouteFunction = (route: RawLocation | RouteLocationRaw, locale?: Locale) => Route | ReturnType<Router['resolve']> | undefined;

/**
 * Localize routes
 *
 * @param routes - Some routes
 * @param options - An options
 *
 * @returns Localized routes
 *
 * @public
 */
export declare function localizeRoutes(routes: I18nRoute[], { defaultLocale, strategy, trailingSlash, routesNameSeparator, defaultLocaleRouteNameSuffix, includeUprefixedFallback, optionsResolver, localizeRoutesPrefixable, locales }?: Pick<I18nRoutingOptions, 'defaultLocale' | 'strategy' | 'locales' | 'routesNameSeparator' | 'trailingSlash' | 'defaultLocaleRouteNameSuffix' | 'localizeRoutesPrefixable'> & {
    includeUprefixedFallback?: boolean;
    optionsResolver?: RouteOptionsResolver;
}): I18nRoute[];

/**
 * Localize route path prefix judgment logic in {@link localizeRoutes} function
 */
export declare type LocalizeRoutesPrefixable = (options: LocalizeRoutesPrefixableOptions) => boolean;

/**
 * Localize route path prefix judgment options used in {@link LocalizeRoutesPrefixable}
 */
export declare interface LocalizeRoutesPrefixableOptions {
    /**
     * Current locale
     */
    currentLocale: Locale;
    /**
     * Default locale
     */
    defaultLocale: Locale;
    /**
     * Curernt strategy
     */
    strategy: Strategies;
    /**
     * Whether the route to be resolved is child or not
     */
    isChild: boolean;
    /**
     * The path of route
     */
    path: string;
}

export declare type MetaAttrs = Record<string, any>;

/**
 * Route path prefix judgment logic in {@link resolveRoute} function
 */
export declare type Prefixable = (optons: PrefixableOptions) => boolean;

declare function prefixable(optons: PrefixableOptions): boolean;

declare function prefixable_2(optons: LocalizeRoutesPrefixableOptions): boolean;

/**
 * Route path prefix judgment options used in {@link Prefixable}
 */
export declare type PrefixableOptions = Pick<LocalizeRoutesPrefixableOptions, 'currentLocale' | 'defaultLocale' | 'strategy'>;

export declare function proxyVueInstance(target: Function): Function;

/**
 * Register global i18n routing option registory
 *
 * @param router - A router instance, about router type
 * @param options - A global options, about options type, see {@link I18nRoutingGlobalOptions}
 */
export declare function registerGlobalOptions<Context = unknown>(router: Router | VueRouter, options: I18nRoutingGlobalOptions<Context>): void;

/**
 * Resolve base url
 *
 * @param baseUrl - A base url to resolve on SEO and domain. if you want to resolve with dynamically, you can spacify {@link BaseUrlResolveHandler}
 * @param context - A context to resolve base url, if you want to resolve base url with {@link BaseUrlResolveHandler}
 *
 * @returns A resolved base url
 */
export declare function resolveBaseUrl<Context = unknown>(baseUrl: string | BaseUrlResolveHandler<Context>, context: Context): string;

export declare function resolveRoute(this: RoutingProxy, route: any, locale?: Locale): any;

export { Route }

declare type _Route = UnionToIntersection<RouteConfig>;

/**
 * Route config for vue-router v4
 */
declare interface Route_2 {
    name?: string;
    path: string;
    file?: string;
    children?: Route_2[];
}

/**
 * Route config for lagacy vue-router v3
 */
export declare interface RouteLegacy extends Pick<_Route, Exclude<keyof _Route, 'children' | 'component'>> {
    chunkName?: string;
    chunkNames?: Record<string, string>;
    component?: _Route['component'] | string;
    children?: RouteLegacy[];
}

export { RouteLocationNormalized }

export { RouteLocationNormalizedLoaded }

/**
 * Resolver for route localizing options
 */
export declare type RouteOptionsResolver = (route: I18nRoute, localeCodes: string[]) => ComputedRouteOptions | null;

/**
 * Routing Proxy
 */
export declare interface RoutingProxy {
    i18n: any;
    getRouteBaseName: any;
    localePath: any;
    localeRoute: any;
    localeLocation: any;
    resolveRoute: any;
    switchLocalePath: any;
    localeHead: any;
    route: Route | RouteLocationNormalizedLoaded;
    router: Router | VueRouter;
    defaultLocale?: string;
    localeCodes?: string[];
    strategy?: Strategies;
    defaultDirection?: Directions;
    defaultLocaleRouteNameSuffix?: string;
    trailingSlash?: boolean;
    routesNameSeparator?: string;
    prefixable?: Prefixable;
    switchLocalePathIntercepter?: SwitchLocalePathIntercepter;
    dynamicRouteParamsKey?: string | symbol;
}

/**
 * SEO Attribute options
 */
export declare interface SeoAttributesOptions {
    /**
     * An array of strings corresponding to query params you would like to include in your canonical URL.
     *
     * @defaultValue []
     */
    canonicalQueries?: string[];
}

/**
 * Set a locale
 *
 * @param i18n - An [I18n](https://vue-i18n.intlify.dev/api/general.html#i18n) instance or a [Composer](https://vue-i18n.intlify.dev/api/composition.html#composer) instance
 * @param locale - A target locale
 */
export declare function setLocale(i18n: I18n | Composer, locale: Locale): void;

export declare const STRATEGIES: {
    readonly PREFIX: "prefix";
    readonly PREFIX_EXCEPT_DEFAULT: "prefix_except_default";
    readonly PREFIX_AND_DEFAULT: "prefix_and_default";
    readonly NO_PREFIX: "no_prefix";
};

/**
 * Routing strategy
 */
export declare type Strategies = typeof STRATEGIES[keyof typeof STRATEGIES];

/**
 * Returns path of the current route for specified locale
 *
 * @param this - A {@link RoutingProxy} instance
 * @param locale - A locale
 *
 * @returns A path of the current route
 */
export declare function switchLocalePath(this: RoutingProxy, locale: Locale): string;

/**
 * Swtich locale path function
 *
 * @param locale - A locale code, if not specified, uses the current locale
 *
 * @returns Returns a link to the current route in another language
 *
 * @see {@link useSwitchLocalePath}
 */
export declare type SwitchLocalePathFunction = (locale?: Locale) => string;

/**
 * The intercept handler which is called in {@link switchLocalePath} function
 */
export declare type SwitchLocalePathIntercepter = (path: string, locale: Locale) => string;

/**
 * The target locale info
 *
 * @remarks
 * This type is used by {@link BrowserLocaleMatcher} first argument
 */
export declare type TargetLocale = Required<Pick<LocaleObject, 'code' | 'iso'>>;

declare type UnionToIntersection<T> = (T extends any ? (k: T) => void : never) extends (k: infer U) => void ? U : never;

/**
 * Use localize head meta
 *
 * @param options - An options, see about details {@link I18nHeadOptions}, {@link ComposableOptions}, {@link I18nCommonRoutingOptions}
 *
 * @returns Genereated SEO head meta information
 */
export declare function useLocaleHead({ addDirAttribute, addSeoAttributes, identifierAttribute, strategy, defaultLocale, route, router, i18n }?: Pick<I18nCommonRoutingOptionsWithComposable, 'strategy' | 'defaultLocale' | 'route' | 'router' | 'i18n'> & I18nHeadOptions): Ref<I18nHeadMetaInfo>;

/**
 * Use resolve locale location
 *
 * @param options - An options, see about details {@link I18nCommonRoutingOptionsWithComposable}
 *
 * @returns Returns a {@link LocaleLocationFunction}
 */
export declare function useLocaleLocation({ router, route, i18n, defaultLocale, defaultLocaleRouteNameSuffix, routesNameSeparator, strategy, trailingSlash }?: I18nCommonRoutingOptionsWithComposable): LocaleLocationFunction;

/**
 * Use resolve locale path
 *
 * @param options - An options, see about details {@link I18nCommonRoutingOptionsWithComposable}
 *
 * @returns Returns a {@link LocalePathFunction}
 */
export declare function useLocalePath({ router, route, i18n, defaultLocale, defaultLocaleRouteNameSuffix, routesNameSeparator, strategy, trailingSlash }?: I18nCommonRoutingOptionsWithComposable): LocalePathFunction;

/**
 * Use resolve locale route
 *
 * @param options - An options, see about details {@link I18nCommonRoutingOptionsWithComposable}
 *
 * @returns Returns a {@link LocaleRouteFunction}
 */
export declare function useLocaleRoute({ router, route, i18n, defaultLocale, defaultLocaleRouteNameSuffix, routesNameSeparator, strategy, trailingSlash }?: I18nCommonRoutingOptionsWithComposable): LocaleRouteFunction;

/**
 * Use route base name
 *
 * @param givenRoute - A route object, if not provided, the route is returned with `useRoute` will be used
 * @param options - An options, see about details {@link I18nCommonRoutingOptionsWithComposable}
 *
 * @returns The route base name, if route name is not defined, return null
 */
export declare function useRouteBaseName(givenRoute?: Route | RouteLocationNormalizedLoaded, { router, routesNameSeparator }?: I18nCommonRoutingOptionsWithComposable): string | undefined;

/**
 * Use swtich locale path
 *
 * @param options - An options, see about details {@link I18nCommonRoutingOptionsWithComposable}
 *
 * @returns Returns a {@link SwitchLocalePathFunction}
 */
export declare function useSwitchLocalePath({ router, route, i18n, defaultLocale, defaultLocaleRouteNameSuffix, routesNameSeparator, strategy, trailingSlash }?: I18nCommonRoutingOptionsWithComposable): SwitchLocalePathFunction;

/**
 * Vue I18n Routing Version
 *
 * @remarks
 * Semver format. Same format as the package.json `version` field.
 */
export declare const VERSION: string;

export declare type VueI18nExtendOptions<Context = unknown> = Pick<I18nRoutingOptions<Context>, 'baseUrl'> & {
    locales?: string[] | LocaleObject[];
    localeCodes?: string[];
    context?: Context;
    hooks?: ExtendHooks;
};

/**
 * An options of Vue I18n Routing Plugin
 */
export declare interface VueI18nRoutingPluginOptions {
    /**
     * Whether to inject some option APIs style methods into Vue instance
     *
     * @defaultValue `true`
     */
    inject?: boolean;
    /**
     * @internal
     */
    __composerExtend?: (composer: Composer) => void;
    /**
     * @internal
     */
    __vueI18nExtend?: (vueI18n: VueI18n) => void;
}

export { }
import type { ComputedRef } from 'vue-demi'

export interface ComposerCustomProperties {
  /**
   * List of locales
   *
   * @remarks
   * Can either be an array of string codes (e.g. `['en', 'fr']`) or an array of {@link LocaleObject} for more complex configurations
   */
  locales: ComputedRef<string[] | LocaleObject[]>
  /**
   * List of locale codes
   */
  localeCodes: ComputedRef<string[]>
  /**
   * Base URL that is used in generating canonical links
   */
  baseUrl: ComputedRef<string>
}
declare module 'vue-i18n' {
  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  export interface ComposerCustom extends ComposerCustomProperties {}
}

declare module 'vue-i18n-bridge' {
  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  export interface ComposerCustom extends ComposerCustomProperties {}
}
declare module '@intlify/vue-i18n-bridge' {
  // eslint-disable-next-line @typescript-eslint/no-empty-interface
  export interface ComposerCustom extends ComposerCustomProperties {}
}
